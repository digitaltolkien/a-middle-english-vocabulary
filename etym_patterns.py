import re

IT = r"_[^_]+_"
LANG = r"(L|OE|OFr|ONFr|ON|AFr|MLG|ME|MnE|MDu|Med.L|Du|G|OIcel|LG)\."
CAP_WORD = r"[A-ZÞ][a-zþȝ]+(\([en]\))?"
GRM = r"(n|v|adj|adv|pl|fem|str|wk|neut|dat|sg|compar. adv|nom)\."
SUP = r"\^\d+"
QV = r"_q\.v\._"

regexes = [
    re.compile(r)
    for r in [
        fr"_See_ next\.$",
        fr"{CAP_WORD} \+ {CAP_WORD}, _{GRM}_{SUP}$",
        fr"{CAP_WORD} \+ {CAP_WORD}, _{GRM}_$",
        fr"{CAP_WORD} \+ {CAP_WORD}, {QV}$",
        fr"{CAP_WORD}- \+ {CAP_WORD}, _{GRM}_{SUP}$",
        fr"{CAP_WORD}- \+ {CAP_WORD}, {QV}$",
        fr"{CAP_WORD}, _{GRM}_ \+ {CAP_WORD}, {QV}$",
        fr"{CAP_WORD}, _{GRM}_ \+ {CAP_WORD}\.$",
        fr"{CAP_WORD}, {CAP_WORD} \+ {CAP_WORD}, {QV}$",
        fr"{IT} \+ {LANG} {IT}\.$",
        fr"{LANG} {IT} [a-z]+\.$",
        fr"{LANG} {IT} {GRM} {GRM}$",
        fr"{LANG} {IT} \({IT}\)\.$",
        fr"{LANG} {IT} \(late {IT}\), &c\.$",
        fr"{LANG} {IT} \(or {IT}\) {IT}\.$",
        fr"{LANG} {IT} \+ {CAP_WORD}, {QV}$",
        fr"{LANG} {IT} \+ {CAP_WORD}\.$",
        fr"{LANG} {IT} \+ {IT} indef\.$",
        fr"{LANG} {IT} \+ {IT}, {GRM}$",
        fr"{LANG} {IT} \+ {IT}\.$",
        fr"{LANG} {IT} \+ {LANG} {IT}\.$",
        fr"{LANG} {IT}, [a-z ]+\.$",  # inconsistent comma?
        fr"{LANG} {IT}, [a-z]+, [a-z]+\.$",
        fr"{LANG} {IT}, {CAP_WORD}\.$",
        fr"{LANG} {IT}, {GRM} {GRM}$",  # inconsistent comma?
        fr"{LANG} {IT}, {GRM} {IT}\.$",
        fr"{LANG} {IT}, {GRM} and {GRM}$",
        fr"{LANG} {IT}, {GRM}$",
        fr"{LANG} {IT}, {IT}, [a-z]+\.$",
        fr"{LANG} {IT}, {IT}, {IT}\.$",
        fr"{LANG} {IT}, {IT}, &c.$",
        fr"{LANG} {IT}, {IT}; {IT}\.$",
        fr"{LANG} {IT}, {IT}\.$",
        fr"{LANG} {IT}, {LANG} {IT}\.$",
        fr"{LANG} {IT}, earlier {IT}\.$",
        fr"{LANG} {IT}, from {LANG}$",
        fr"{LANG} {IT}, later {IT}\.$",
        fr"{LANG} {IT}, pp\. {IT}\.$",
        fr"{LANG} {IT}; _see_ {CAP_WORD}\.$",
        fr"{LANG} {IT}; {GRM} {IT}\.$",
        fr"{LANG} {IT}; {IT}, _{GRM}_$",
        fr"{LANG} {IT}; {IT}, {GRM}$",
        fr"{LANG} {IT}; {IT}\.$",
        fr"{LANG} {IT}; {LANG} {IT}\.$",
        fr"{LANG} {IT}; cf\. next\.$",
        fr"{LANG} {IT}; obscure\.$",
        fr"{LANG} {IT}; see note\.$",
        fr"{LANG} {IT}; see prec\.$",
        fr"{LANG} {IT}{SUP} \+ {IT}\.$",
        fr"{LANG} {IT}\.{SUP}$",
        fr"{LANG} {IT}\.$",
        fr"{LANG} \(from {LANG}\) {IT}\.$",
        fr"{LANG} \(rare\) {IT}\.$",
        fr"{LANG} in {IT}\.$",
        fr"{LANG}, {LANG} {IT}\.$",
        fr"{LANG}$",
        fr"\? {LANG} {IT}\.$",
        fr"\? Cf\. {LANG} {IT}, [a-z]+\.$",
        fr"\? From next\.$",
        fr"\? From prec\.$",
        fr"\? Rel\. to next\.$",
        fr"\? Related to {CAP_WORD}, _{GRM}_{SUP}$",
        fr"\? Related to {CAP_WORD}, _{GRM}_$",
        fr"\? Same as next\.$",
        fr"A Northern form\. ON\. {IT}\.$",
        fr"As next\.$",
        fr"As prec\.$",
        fr"Cf\. {LANG} _[^_]+!_$",
        fr"Cf\. {LANG} {IT}, [a-z]+\.$",
        fr"Cf\. {LANG} {IT}, {GRM}$",
        fr"Cf\. {LANG} {IT}.$",
        fr"Cf\. {LANG}, {LANG}, {IT}\.$",
        fr"Cf\. MDu\., MLG\. {IT}\.$",
        fr"Children's language\.$",
        fr"Echoic, on model of next\.",
        fr"Echoic; _cf\._ {CAP_WORD}\.$",
        fr"Echoic\.$",
        fr"Extended from prec\.$",
        fr"Formed on {CAP_WORD} _{GRM}_$",
        fr"Formed on {CAP_WORD}, _{GRM}_$",
        fr"From _prec\._$",
        fr"From {CAP_WORD}, _{GRM}_{SUP}$",
        fr"From {CAP_WORD}, _{GRM}_$",
        fr"From {CAP_WORD}, {CAP_WORD}\.$",
        fr"From {CAP_WORD}, {QV}$",
        fr"From {CAP_WORD}\.$",
        fr"From {IT}\.$",
        fr"From {LANG} {IT}, [a-z ]+\.$",  # inconsistent comma?
        fr"From {LANG} {IT}, {GRM}$",
        fr"From {LANG} {IT}\.$",
        fr"From {LANG}, {LANG} {IT}\.$",
        fr"From next\.$",
        fr"From prec\. \(i\)\.$",
        fr"From prec\.$",
        fr"From pres\. p\. of {CAP_WORD}\.$",
        fr"Late OE\. {IT}, {IT}\.",
        fr"Next \+ {LANG} {IT}\.$",
        fr"Not known; only allit\.$",
        fr"Not known\.$",
        fr"Obscure\.$",
        fr"OE\. {IT} \(Kt\. {IT}\)\.$",
        fr"OE\. {IT} \(rare\)\.$",
        fr"OE\. {IT}, Kt\. {IT}\.$",
        fr"OE\. \(late\) {IT}\.$",
        fr"OE\. \(Nth\.\) {IT}\.$",
        fr"OE\. \(WS\.\) {IT}\.$",
        fr"Pp\. of {CAP_WORD}.$",
        fr"Prec\. \+ _pp\._ of {CAP_WORD}\.$",
        fr"Prec\. \+ {CAP_WORD}, {QV}$",
        fr"Prec\. \+ {CAP_WORD}\.$",
        fr"Prec\. \+ {GRM} {IT}\.$",
        fr"Prec\. \+ {IT}\.$",
        fr"Prec\. \+ {LANG} {IT}\.$",
        fr"Prob\. from prec\.$",
        fr"Prob\. related to {CAP_WORD}\.$",
        fr"Prob\. same as prec\.$",
        fr"See _N\.E\.D\._ s\.v\. {IT}\.$",
        fr"See _N\.E\.D\._, s\.v\. {IT}\.$",  # inconsistent comma
        fr"See _N\.E\.D\._$",
        fr"Shortened from {CAP_WORD}\.$",
        fr"Stem of {LANG} {IT}, {GRM}$",
        fr"Stem of {LANG} {IT}\.$",
        fr"Stem of next\.$",
        fr"Unknown\.$",
    ]
]


def check_etymology(etymology):
    for regex in regexes:
        if regex.match(etymology):
            return True
    return False
