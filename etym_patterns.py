import re

IT = r"_[^_]+_"
LANG = r"(L|OE|OFr|ONFr|ON|AFr|MLG|ME|MnE|MDu|Med.L|Du|G|OIcel|LG)\."
CAP_WORD = r"[A-ZÞ][a-zþȝ]+(\([en]\))?"
GRM = r"(n|v|adj|adv|pl|fem|str|wk|neut|dat|sg|compar. adv|nom)\."
SUP = r"\^\d+"

regexes = [
    re.compile(r)
    for r in [
        r"_See_ next\.$",
        r"\? From next\.$",
        r"\? From prec\.$",
        r"\? Rel\. to next\.$",
        r"\? Same as next\.$",
        r"As next\.$",
        r"As prec\.$",
        r"Children's language\.$",
        r"Echoic\.$",
        r"Extended from prec\.$",
        r"From _prec\._$",
        r"From next\.$",
        r"From prec\. \(i\)\.$",
        r"From prec\.$",
        r"Not known; only allit\.$",
        r"Not known\.$",
        r"Obscure\.$",
        r"OFr\.$",
        r"Prob\. from prec\.$",
        r"Prob\. same as prec\.$",
        r"See _N\.E\.D\._$",
        r"Stem of next\.$",
        r"Unknown\.$",
        fr"{CAP_WORD} \+ {CAP_WORD}, _{GRM}_{SUP}$",
        fr"{CAP_WORD} \+ {CAP_WORD}, _{GRM}_$",
        fr"{CAP_WORD} \+ {CAP_WORD}, _q\.v\._$",
        fr"{CAP_WORD}- \+ {CAP_WORD}, _{GRM}_{SUP}$",
        fr"{CAP_WORD}- \+ {CAP_WORD}, _q\.v\._$",
        fr"{CAP_WORD}, _{GRM}_ \+ {CAP_WORD}\.$",
        fr"{CAP_WORD}, {CAP_WORD} \+ {CAP_WORD}, _q\.v\._",
        fr"{IT} \+ {LANG} {IT}\.$",
        fr"{LANG} {IT} [a-z]+\.$",
        fr"{LANG} {IT} {GRM} {GRM}$",
        fr"{LANG} {IT} \({IT}\)\.$",
        fr"{LANG} {IT} \+ {CAP_WORD}, _q\.v\._$",
        fr"{LANG} {IT} \+ {CAP_WORD}, _q\.v\._$",
        fr"{LANG} {IT} \+ {CAP_WORD}\.$",
        fr"{LANG} {IT} \+ {IT}, neut\.$",
        fr"{LANG} {IT} \+ {IT}\.$",
        fr"{LANG} {IT} \+ {LANG} {IT}\.$",
        fr"{LANG} {IT} \+ {LANG} {IT}\.$",
        fr"{LANG} {IT}, [a-z ]+\.$",  # inconsistent comma?
        fr"{LANG} {IT}, {GRM} {GRM}$",  # inconsistent comma?
        fr"{LANG} {IT}, {GRM} {IT}\.$",
        fr"{LANG} {IT}, {GRM} and {GRM}$",
        fr"{LANG} {IT}, {GRM}$",
        fr"{LANG} {IT}, {IT}, [a-z]+\.",
        fr"{LANG} {IT}, {IT}, {IT}\.$",
        fr"{LANG} {IT}, {IT}, &c.$",
        fr"{LANG} {IT}, {IT}\.$",
        fr"{LANG} {IT}, {LANG} {IT}\.",
        fr"{LANG} {IT}, {LANG} {IT}\.$",
        fr"{LANG} {IT}, from {LANG}$",
        fr"{LANG} {IT}; {IT}, _{GRM}_$",
        fr"{LANG} {IT}; {IT}\.$",
        fr"{LANG} {IT}; {LANG} {IT}\.$",
        fr"{LANG} {IT}; cf\. next\.",
        fr"{LANG} {IT}; obscure\.$",
        fr"{LANG} {IT}; see note\.",
        fr"{LANG} {IT}; see prec\.$",
        fr"{LANG} {IT}{SUP} \+ {IT}\.$",
        fr"{LANG} {IT}\.{SUP}$",
        fr"{LANG} {IT}\.$",
        fr"{LANG} \(from {LANG}\) {IT}\.$",
        fr"{LANG} \(rare\) {IT}\.",
        fr"{LANG} in {IT}\.$",
        fr"{LANG}, {LANG} {IT}\.$",
        fr"\? {LANG} {IT}\.$",
        fr"\? Cf\. {LANG} {IT}, [a-z]+\.",
        fr"\? Cf\. {LANG} {IT}, [a-z]+\.",
        fr"\? Related to {CAP_WORD}, _{GRM}_$",
        fr"Cf\. {LANG} _[^_]+!_$",
        fr"Cf\. {LANG} {IT}, [a-z]+\.$",
        fr"Cf\. {LANG} {IT}, {GRM}$",
        fr"Cf\. {LANG} {IT}.$",
        fr"Cf\. {LANG}, {LANG}, {IT}\.$",
        fr"Cf\. MDu\., MLG\. {IT}\.$",
        fr"Echoic; _cf\._ {CAP_WORD}\.$",
        fr"Formed on {CAP_WORD} _{GRM}_$",
        fr"Formed on {CAP_WORD}, _{GRM}_$",
        fr"From {CAP_WORD}, _{GRM}_{SUP}$",
        fr"From {CAP_WORD}, _{GRM}_$",
        fr"From {CAP_WORD}, _q\.v\._$",
        fr"From {CAP_WORD}, {CAP_WORD}\.$",
        fr"From {CAP_WORD}\.$",
        fr"From {IT}\.$",
        fr"From {LANG} {IT}, [a-z ]+\.$",  # inconsistent comma?
        fr"From {LANG} {IT}, {GRM}$",
        fr"From {LANG} {IT}\.$",
        fr"From {LANG}, {LANG} {IT}\.$",
        fr"From pres\. p\. of {CAP_WORD}\.$",
        fr"Next \+ {LANG} {IT}\.$",
        fr"OE\. {IT} \(Kt\. {IT}\)\.$",
        fr"OE\. {IT} \(rare\)\.$",
        fr"OE\. \(late\) {IT}\.$",
        fr"OE\. \(Nth\.\) {IT}\.$",
        fr"OE\. \(WS\.\) {IT}\.$",
        fr"Pp\. of {CAP_WORD}.",
        fr"Prec\. \+ _pp\._ of {CAP_WORD}\.$",
        fr"Prec\. \+ {CAP_WORD}, _q\.v\._$",
        fr"Prec\. \+ {CAP_WORD}\.$",
        fr"Prec\. \+ {GRM} {IT}\.",
        fr"Prec\. \+ {IT}\.$",
        fr"Prec\. \+ {LANG} {IT}\.$",
        fr"Prob\. related to {CAP_WORD}\.$",
        fr"See _N\.E\.D\._ s\.v\. {IT}\.",
        fr"Shortened from {CAP_WORD}\.$",
        fr"Stem of {LANG} {IT}\.$",
    ]
]


def check_etymology(etymology):
    for regex in regexes:
        if regex.match(etymology):
            return True
    return False
